/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attendease.gui;

import attendease.util.ATableModel;
import attendease.util.AutoDismiss;
import attendease.util.ColorRenderer;
import attendease.util.FrameController;
import attendease.util.Meeting;
import attendease.util.Start;
import attendease.util.Student;
import attendease.util.MiscUtils;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.TimeZone;

/**
 *
 * @author timothy.chandler
 */
public class MeetingPanel extends javax.swing.JPanel {

    /**
     * Creates new form MeetingPanel
     */
    public MeetingPanel() {
        preInit();
        initComponents();
        postInit();
    }
    
    private void preInit(){
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Start.createLog(ex, "Unable to set proper look and feel");
        }
        initTable();
    }
    
    private void postInit(){
        cRenderer=new ColorRenderer();
        attendanceTable.getColumnModel().getColumn(NAME_COLUMN).setCellRenderer(cRenderer);
        attendanceTable.getColumnModel().getColumn(TIME_COLUMN).setCellRenderer(cRenderer);
        attendanceTable.getColumnModel().getColumn(POINTS_COLUMN).setCellRenderer(cRenderer);
    }

    private void initTable(){
        aTableModel=new ATableModel();
        aTableModel.addColumn("Name");
        aTableModel.addColumn("Arrived at");
        aTableModel.addColumn("Point Total");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sDLabel = new javax.swing.JLabel();
        mTLabel = new javax.swing.JLabel();
        doneButton = new javax.swing.JButton();
        idTextField = new javax.swing.JTextField();
        idTFLabel = new javax.swing.JLabel();
        attendanceTableScrollPane = new javax.swing.JScrollPane();
        attendanceTable = new javax.swing.JTable();
        tLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sDLabel.setText("Date");
        add(sDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        mTLabel.setText("Title");
        add(mTLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        doneButton.setText("Done");
        doneButton.setRequestFocusEnabled(false);
        doneButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                doneButtonMouseReleased(evt);
            }
        });
        add(doneButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 530, -1, -1));

        idTextField.setNextFocusableComponent(idTextField);
        idTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                idTextFieldKeyReleased(evt);
            }
        });
        add(idTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 530, 119, -1));

        idTFLabel.setText("Maually Enter ID Number");
        add(idTFLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 510, 160, -1));

        attendanceTable.setModel(aTableModel);
        attendanceTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        attendanceTable.setRequestFocusEnabled(false);
        attendanceTable.getTableHeader().setResizingAllowed(false);
        attendanceTable.getTableHeader().setReorderingAllowed(false);
        attendanceTableScrollPane.setViewportView(attendanceTable);

        add(attendanceTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 73, 380, -1));

        tLabel.setText("Time");
        add(tLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void doneButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doneButtonMouseReleased
        if(javax.swing.JOptionPane.showOptionDialog(this, "Are you sure you want to finish this meeting?", "AttendEase", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.WARNING_MESSAGE, null, new Object[]{"Yes", "Cancel"}, 1)==0){
            currentMeeting.setMeatHeld(true);
            new Thread(new Runnable(){
                @Override
                public void run(){
                    Start.d.editMeeting(FrameController.getSmgp().getCurrentGroupName(), currentMeeting.getVaules());
                    saveStudents(FrameController.getSmgp().getCurrentGroupName());
                }
            }).start();
            FrameController.setCurrentPanel("emp");
            clearTable();
        }
    }//GEN-LAST:event_doneButtonMouseReleased

    private void idTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTextFieldKeyReleased
        if(evt.getKeyChar()=='\n'){
            idTextField.setFocusable(false);
            Collections.sort(stews, new Comparator<Student>(){
                @Override
                public int compare(Student s1, Student s2){
                    Integer i1=s1.getID();
                    Integer i2=s2.getID();
                    return i1.compareTo(i2);
                }
            });
            int id=-1;
            try{
                id=new Integer(idTextField.getText());
                int loc=0;
                boolean found=false;
                for(int i=0;i<stews.size();i++) {
                    if(stews.get(i).getID()==id){
                        found=true;
                        loc=i;
                        break;
                    }
                }
                if(!found){
                    AutoDismiss.showMessageDialog(this, "You are not in this Group! Please check that you typed your ID number correctly.");
                }else{
                    if(isHere(stews.get(loc).getName())){
                        AutoDismiss.showMessageDialog(this, "You have already signed in for this Meeting!");
                    }else{
                        if(currentMeeting.getrPoints()>0){
                            if(stews.get(loc).getPoints()<currentMeeting.getrPoints()){
                                AutoDismiss.showMessageDialog(this, "You do not have enough points to attend this meeting!");
                            }else{
                                scanInStudent(stews.get(loc));
                                idNums.add(stews.get(loc).getID());
                            }
                        }else{
                            scanInStudent(stews.get(loc));
                            idNums.add(stews.get(loc).getID());
                        }
                    }
                }
            }catch(NumberFormatException e){
                AutoDismiss.showMessageDialog(this, "That ID Number is Invalid!");
            }
            idTextField.setText("");
            idTextField.setFocusable(true);
            idTextField.requestFocus();
        }
    }//GEN-LAST:event_idTextFieldKeyReleased

    private void scanInStudent(Student s){
        String[] time=getScanInTime();
        s.addPoints(getPointsAdded(time[0]));
        Integer points=s.getPoints();
        s.incrementMeetingsAttended();
        aTableModel.addRow(new Object[]{s.getName(), time[0], points});
    }
    
    public void initMeeting(Meeting m, ArrayList<Student> ss){
        setTitle(m.getName());
        setStartDate(m.getDate());
        setStartTime(m.getStartTime());
        setEndTime(m.getEndTime());
        currentMeeting=m;
        stews=ss;
        idNums=new ArrayList<>();
        idTextField.requestFocus();
    }
    
    private void setTitle(String title) {
        mTLabel.setText(title);
    }
    
    private void setStartDate(String date) {
        sDLabel.setText(date);
    }
    
    private void setStartTime(String time){
        tLabel.setText(time);
    }
    
    private void setEndTime(String time) {
        if(!(time==null||time.equals(""))){
            tLabel.setText(tLabel.getText()+" - "+time);
        }
    }
    
    private int getPointsAdded(String time) {
        if(MiscUtils.isLate(MiscUtils.timeToInt(currentMeeting.getStartTime()), MiscUtils.timeToInt(time), FrameController.getGroup(FrameController.getSmgp().getCurrentGroupName()).getMeeting(FrameController.getSmgp().getCurrentMeetingName()).getDate(), new SimpleDateFormat("MMMM/dd/yyyy").format(Calendar.getInstance().getTime()))){
            return currentMeeting.getlPoints();
        }
        return currentMeeting.getgPoints();
    }

    private String[] getScanInTime() {
        Calendar c=Calendar.getInstance(TimeZone.getTimeZone("CST"));
        String[] time=new String[2];
        time[0]="";
        time[1]="y";
        String period=" PM";
        if(c.get(Calendar.AM_PM)==0){
            period=" AM";
        }
        if(c.get(Calendar.MINUTE)<10){
            time[0]=c.get(Calendar.HOUR_OF_DAY)+":0"+c.get(Calendar.MINUTE)+period;
        }else{
            time[0]=c.get(Calendar.HOUR_OF_DAY)+":"+c.get(Calendar.MINUTE)+period;
        }
        if(MiscUtils.isLate(MiscUtils.timeToInt(FrameController.getGroup(FrameController.getSmgp().getCurrentGroupName()).getMeeting(FrameController.getSmgp().getCurrentMeetingName()).getStartTime()), MiscUtils.timeToInt(time[0]), FrameController.getGroup(FrameController.getSmgp().getCurrentGroupName()).getMeeting(FrameController.getSmgp().getCurrentMeetingName()).getDate(), new SimpleDateFormat("MMMM/dd/yyyy").format(Calendar.getInstance().getTime()))){
            time[1]="n";
        }
        return time;
    }
    
    private void clearTable(){
        for(int i=attendanceTable.getRowCount()-1;i>=0;i--) {
            aTableModel.removeRow(i);
        }
    }
    
    private boolean isHere(String text) {
        for(int i=0;i<attendanceTable.getRowCount();i++){
            if(attendanceTable.getValueAt(i, NAME_COLUMN).equals(text)){
                return true;
            }
        }
        return false;
    }
    
    private void saveStudents(String clubName){
        for(Student s:stews){
            if(attended(s.getID())){
                Start.d.editStudent(clubName, s.getValues());
            }
        }
    }
    
    private boolean attended(int id){
        for(int x:idNums){
            if(x==id){
                return true;
            }
        }
        return false;
    }
    
    private ATableModel aTableModel;
    private ArrayList<Student> stews;
    private ArrayList<Integer> idNums;
    private Meeting currentMeeting;
    private ColorRenderer cRenderer;
    
    public static final int NAME_COLUMN=0;
    public static final int TIME_COLUMN=1;
    public static final int POINTS_COLUMN=2;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attendanceTable;
    private javax.swing.JScrollPane attendanceTableScrollPane;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel idTFLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel mTLabel;
    private javax.swing.JLabel sDLabel;
    private javax.swing.JLabel tLabel;
    // End of variables declaration//GEN-END:variables
}

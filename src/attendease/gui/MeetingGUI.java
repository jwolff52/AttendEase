/************************************************************************
    AttendEase - A simple, point-and-click attendance program.
    Copyright (C) 2013-2014  James Wolff, Timothy Chandler

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*************************************************************************/

package attendease.gui;

import attendease.util.AFrame;
import attendease.util.FrameController;
import attendease.util.Meeting;
import attendease.util.Start;
import attendease.util.MiscUtils;

/**
 *
 * @author timothy.chandler
 */
public class MeetingGUI extends AFrame {

    public MeetingGUI() {
        preInit();
        initComponents();
        postInit();
    }

    private void preInit(){
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Start.createLog(ex, "Unable to set proper look and feel");
        }
        isEditing=false;
    }
    
    private void postInit(){
        javax.swing.GroupLayout layout=new javax.swing.GroupLayout(getContentPane());
        setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(mep)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(mep)
        );
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit/Add Meeting");
        setName("mg"); // NOI18N
        setResizable(false);

        cancelButton.setText("Cancel");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cancelButtonMouseReleased(evt);
            }
        });

        createButton.setText("Create");
        createButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                createButtonMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(createButton)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(createButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 309, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setJMenuBar(FrameController.getMf().getJMenuBar());

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseReleased
        FrameController.changeFrameState("mg");
        FrameController.getMep().clear();
    }//GEN-LAST:event_cancelButtonMouseReleased

    private void createButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createButtonMouseReleased
        if(isEditing){
            if(MiscUtils.isValidTime(mep.getStartHour(),mep.getStartMinute(), true, mep.is24Hour())&&MiscUtils.isValidTime(mep.getEndHour(), mep.getEndMinute(), false, mep.is24Hour())){
                String[] values=FrameController.getMep().getValues();
                values[0]=FrameController.getInv().getIdentifier(FrameController.getMep().getOldName(), 0);
                String[] localValues=values;
                try{
                    if(localValues[1].substring(0, localValues[2].length()).equals(localValues[2])){
                        localValues[1]=localValues[2]+localValues[1].substring(localValues[2].length(), localValues[1].length()-6)+":"+localValues[1].substring(localValues[1].length()-5);
                    }
                }catch(StringIndexOutOfBoundsException e){
                }
                FrameController.getInv().getGroup(FrameController.getSmgp().getCurrentGroupName()).removeMeeting(FrameController.getMep().getOldName());
                FrameController.getInv().getGroup(FrameController.getSmgp().getCurrentGroupName()).addMeeting(new Meeting(localValues));
                FrameController.getSmgp().setState("meeting");
                dispose();
                Start.d.editMeeting(FrameController.getSmgp().getCurrentGroupName(), values);
            }else if(!mep.isStartTimeGiven()){
                javax.swing.JOptionPane.showMessageDialog(this, "There was no start time provided!", "Time Error", javax.swing.JOptionPane.WARNING_MESSAGE);
            }else if(!MiscUtils.isValidTime(mep.getStartHour(),mep.getStartMinute(), true, mep.is24Hour())){
                javax.swing.JOptionPane.showMessageDialog(this, "The start time given is invalid, as indicated by the red box.", "Time Error", javax.swing.JOptionPane.WARNING_MESSAGE);
            }else if(!MiscUtils.isValidTime(mep.getEndHour(),mep.getEndMinute(), false, mep.is24Hour())){
                javax.swing.JOptionPane.showMessageDialog(this, "The end time given is invalid, as indicated by the red box.", "Time Error", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }else{
            if(MiscUtils.isValidTime(mep.getStartHour(),mep.getStartMinute(), true, mep.is24Hour())&&MiscUtils.isValidTime(mep.getEndHour(), mep.getEndMinute(), false, mep.is24Hour())){
                String[] values=FrameController.getMep().getValues();
                values[0]=MiscUtils.getNextIdentifier();
                String[] localValues=values;
                try{
                    if(localValues[1].substring(0, localValues[2].length()).equals(localValues[2])){
                        localValues[1]=localValues[2]+localValues[1].substring(localValues[2].length(), localValues[1].length()-6)+":"+localValues[1].substring(localValues[1].length()-5);
                    }
                }catch(StringIndexOutOfBoundsException e){
                }
                FrameController.getInv().getGroup(FrameController.getSmgp().getCurrentGroupName()).addMeeting(new Meeting(localValues));
                FrameController.getSmgp().setState("meeting");
                dispose();
                Start.d.addMeeting(FrameController.getSmgp().getCurrentGroupName(), values);
            }else if(!mep.isStartTimeGiven()){
                javax.swing.JOptionPane.showMessageDialog(this, "There was no start time provided!", "Time Error", javax.swing.JOptionPane.WARNING_MESSAGE);
            }else if(!MiscUtils.isValidTime(mep.getStartHour(),mep.getStartMinute(), true, mep.is24Hour())){
                javax.swing.JOptionPane.showMessageDialog(this, "The start time given is invalid, as indicated by the red box.", "Time Error", javax.swing.JOptionPane.WARNING_MESSAGE);
            }else if(!MiscUtils.isValidTime(mep.getEndHour(),mep.getEndMinute(), false, mep.is24Hour())){
                javax.swing.JOptionPane.showMessageDialog(this, "The end time given is invalid, as indicated by the red box.", "Time Error", javax.swing.JOptionPane.WARNING_MESSAGE);
            }
        }
        FrameController.getMep().clear();
    }//GEN-LAST:event_createButtonMouseReleased
    
    public String getCreateButton(){
        return CREATE_BUTTON;
    }
    
    public String getFinishButton(){
        return FINISH_BUTTON;
    }
    
    public void setButtonText(String text){
        createButton.setText(text);
    }
    
    public void setIsEditing(boolean ie){
        isEditing=ie;
    }
    
    public boolean getIsEditing(){
        return isEditing;
    }
    
    private final MeetingEditPanel mep=FrameController.getMep();
    
    private final String CREATE_BUTTON="Create";
    private final String FINISH_BUTTON="Finish";
    private boolean isEditing;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createButton;
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
